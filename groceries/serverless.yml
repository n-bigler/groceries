org: nbigler
app: dftl
service: dftl
frameworkVersion: '3'

plugins:
  - serverless-dynamodb-local

custom:
  dynamodb:
    stages:
      - dev
provider:
  name: aws
  runtime: nodejs20.x
  region: eu-central-1
  lambdaHashingVersion: '20201221'
  stage: dev
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
    DOMAIN_SUFFIX: 'nbigler-griffon'
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: 
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - Ref: ServiceUserPool
        audience:
          - Ref: ServiceUserPoolClient
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - Effect: Allow
          Action:
            - dynamodb:Query
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/InvertedIndex"

functions:
  item:
    handler: groceries/item.handler
    events:
      - httpApi:
          path: /grocerylist/{groceryListId}
          method: POST
          authorizer: serviceAuthorizer
      - httpApi:
          path: /grocerylist/{groceryListId}
          method: GET
          authorizer: serviceAuthorizer
      - httpApi:
          path: /grocerylist/{groceryListId}/{itemName}
          method: DELETE
          authorizer: serviceAuthorizer


  groceryList:
    handler: groceries/groceryList.handler
    events:
      - httpApi:
          path: /grocerylist
          method: POST
          authorizer: serviceAuthorizer
      - httpApi:
          path: /grocerylist
          method: GET
          authorizer: serviceAuthorizer
      - httpApi:
          path: /grocerylist/{groceryListId}
          method: DELETE
          authorizer: serviceAuthorizer
      - httpApi:
          path: /grocerylist/{groceryListId}
          method: PATCH
          authorizer: serviceAuthorizer

resources:
  Resources:
    GroceriesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties: 
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: InvertedIndex
            KeySchema:
             - AttributeName: SK
               KeyType: HASH
             - AttributeName: PK
               KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    HttpApi:
      Type: 'AWS::ApiGatewayV2::Api'
      DependsOn: ServiceUserPool
    ServiceUserPool:
      Type: 'AWS::Cognito::UserPool'
      Properties:
        UserPoolName: service-user-pool-${opt:stage, self:provider.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    ServiceUserPoolClient:
      Type: 'AWS::Cognito::UserPoolClient'
      Properties:
        ClientName: service-user-pool-client-${opt:stage, self:provider.stage}
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: ServiceUserPool
        CallbackURLs: 
          - https://localhost:3000
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders: 
          - COGNITO
    ServiceUserPoolDomain:
      Type: 'AWS::Cognito::UserPoolDomain'
      Properties:
        UserPoolId: 
          Ref: ServiceUserPool
        Domain: service-user-pool-domain-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}
